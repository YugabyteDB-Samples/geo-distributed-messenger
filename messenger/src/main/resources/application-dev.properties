server.port=${PORT:8080}
logging.level.org.atmosphere = warn
spring.mustache.check-template-location = false

kong.attachments.gateway=http://localhost:8000/upload

# Launch the default browser when starting the application in development mode
vaadin.launch-browser=true
# To improve the performance during development.
# For more information https://vaadin.com/docs/flow/spring/tutorial-spring-configuration.html#special-configuration-parameters
vaadin.whitelisted-packages = com.vaadin,org.vaadin,dev.hilla,com.yugabyte.app.messenger

# JPA configuration
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate-ddl=false

# Schema initialization
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:messenger_schema.sql 
spring.sql.init.continue-on-error=true

# HikariCP configuration
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.schema=messenger

# PostgreSQL configuration for local deployments
# spring.datasource.url = jdbc:postgresql://localhost:5432/postgres
# spring.datasource.username = postgres
# spring.datasource.password = password


# YugabyteDB configuration for local deployments
spring.datasource.url = jdbc:postgresql://127.0.0.1:5433/yugabyte
spring.datasource.username = yugabyte
spring.datasource.password = yugabyte

# 
# Optional property, adjust if you plan to change a database connection
# dynamically in Google Cloud with Runtime Configurator.
# The application recognizes the following property when connecting to a YugabyteDB data source:
# * 'standard' - the data source is connected to a standard/regular node. 
# * 'replica' - the connection goes via a replica node.
# * 'geo' - the data source is connected to a geo-partitioned cluster.
yugabytedb.connection.type=standard

# use this property for geo-partitioned YugabyteDB clusters
# spring.datasource.hikari.connection-init-sql=SET force_global_transaction = TRUE;